/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  3.0.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#includeEtc "caseDicts/mesh/generation/snappyHexMeshDict.cfg"

castellatedMesh on;
snap off;
addLayers on;

geometry
{
    buildings.stl
    {
        type   triSurfaceMesh;
        name   buildings;
    };
        
    topo.stl
    {
        type   triSurfaceMesh;
        name   topo;
    };
        
    refinementBox
    {
        type   searchableBox;
        min   (-250 -250   0);
        max   (250 250  10);
    };
};

castellatedMeshControls
{
    nCellsBetweenLevels 2;
    maxGlobalCells 200000000;
    maxLocalCells 200000000;
        
    features
    (
        {file   "buildings.eMesh";
        levels   ((3 2) (20 1)); }

    );
        
    features
    (
        {file   "topo.eMesh";
        levels   ((3 2) (20 1)); }

    );
        
    refinementSurfaces
    {
        buildings
        {
            level (2 1);
            patchInfo { type wall;}
        };
            
        topo
        {
            level (2 1);
            patchInfo { type wall;}
        };
            
    }

    refinementRegions
    {
        refinementBox
        {
            mode inside;
            levels ((1E15 1));
        };
    }

    locationInMesh (207000 738000 635);
}

snapControls
{
    explicitFeatureSnap    True;
    implicitFeatureSnap    False;
}

layers
{
    buildings
{
nSurfaceLayers 1;
}
}

addLayersControls
{

    // Are the thickness parameters below relative to the undistorted
    // size of the refined cell outside layer (true) or absolute sizes (false).
    relativeSizes True;

    // Per final patch (so not geometry!) the layer information
    layers
    {

    }

    // Expansion factor for layer mesh
    expansionRatio 1;

    // Wanted thickness of final added cell layer. If multiple layers
    // is the
    // thickness of the layer furthest away from the wall.
    // Relative to undistorted size of cell outside layer.
    // is the thickness of the layer furthest away from the wall.
    // See relativeSizes parameter.
    finalLayerThickness 0.3;

    // Minimum thickness of cell layer. If for any reason layer
    // cannot be above minThickness do not add layer.
    // Relative to undistorted size of cell outside layer.
    minThickness 0.1;

    // If points get not extruded do nGrow layers of connected faces that are
    // also not grown. This helps convergence of the layer addition process
    // close to features.
    // Note: changed(corrected) w.r.t 17x! (didn't do anything in 17x)
    nGrow 0;

    // Advanced settings

    // When not to extrude surface. 0 is flat surface, 90 is when two faces
    // are perpendicular
    featureAngle 60;

    // At non-patched sides allow mesh to slip if extrusion direction makes
    // angle larger than slipFeatureAngle.
    slipFeatureAngle 30;

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 3;

    // Number of smoothing iterations of surface normals
    nSmoothSurfaceNormals 1;

    // Number of smoothing iterations of interior mesh movement direction
    nSmoothNormals 3;

    // Smooth layer thickness over surface patches
    nSmoothThickness 10;

    // Stop layer growth on highly warped cells
    maxFaceThicknessRatio 0.5;

    // Reduce layer growth where ratio thickness to medial
    // distance is large
    maxThicknessToMedialRatio 0.3;

    // Angle used to pick up medial axis points
    // Note: changed(corrected) w.r.t 17x! 90 degrees corresponds to 130 in 17x.
    minMedianAxisAngle 90;


    // Create buffer region for new layer terminations
    nBufferCellsNoExtrude 0;


    // Overall max number of layer addition iterations. The mesher will exit
    // if it reaches this number of iterations; possibly with an illegal
    // mesh.
    nLayerIter 50;

}

meshQualityControls
{
}

writeFlags
(
    scalarLevels
    layerSets
    layerFields
);

mergeTolerance 1e-06;

// ************************************************************************* //