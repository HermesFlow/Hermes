{
    "workflow": {
        "root": null,
        "Templates": {},
        "nodeList": [
            "ControlDict",
            "FvSchemes"
        ],
        "nodes": {
            "ControlDict": {
                "Execution": {
                    "type": "jinjaExecuters.jinja",
                    "input_parameters": {
                        "values": "{WebGui.formData}",
                        "template": "openFOAM/simpleFOAM/ControlDict"
                    }
                },
                "GUI": {
                    "Type": "WebGuiNode",
                    "Properties": {},
                    "WebGui": {
                        "Schema": {
                            "title": "",
                            "description": "",
                            "type": "object",
                            "properties": {
                                "application": {
                                    "type": "string",
                                    "title": "application"
                                },
                                "startFrom": {
                                    "type": "string",
                                    "enum": [
                                        "firstTime",
                                        "startTime",
                                        "latestTime"
                                    ],
                                    "description": "Controls the start time of the simulation."
                                },
                                "startTime": {
                                    "title": "startTime",
                                    "type": "number",
                                    "description": "Start time for the simulation with startFrom startTime"
                                },
                                "stopAt": {
                                    "type": "string",
                                    "enum": [
                                        "endTime",
                                        "writeNow",
                                        "noWriteNow",
                                        "nextwrite"
                                    ],
                                    "description": "Controls the end time of the simulation."
                                },
                                "endTime": {
                                    "title": "endTime",
                                    "type": "number",
                                    "description": "End time for the simulation when stopAt endTime; is specified."
                                },
                                "deltaT": {
                                    "title": "deltaT",
                                    "type": "number",
                                    "description": "Time step of the simulation."
                                },
                                "writeControl": {
                                    "type": "string",
                                    "enum": [
                                        "timeStep",
                                        "runTime",
                                        "adjustableRunTime",
                                        "cpuTime",
                                        "clockTime"
                                    ],
                                    "description": "Controls the timing of write output to file."
                                },
                                "writeInterval": {
                                    "title": "writeInterval",
                                    "type": "integer",
                                    "description": "Scalar used in conjunction with writeControl described above."
                                },
                                "purgeWrite": {
                                    "title": "purgeWrite",
                                    "type": "integer",
                                    "description": "Integer representing a limit on the number of time directories that are stored by overwriting time directories on a cyclic basis."
                                },
                                "writeFormat": {
                                    "type": "string",
                                    "enum": [
                                        "ascii",
                                        "binary"
                                    ],
                                    "description": "Specifies the format of the data files."
                                },
                                "writePrecision": {
                                    "title": "writePrecision",
                                    "type": "integer",
                                    "description": "Integer used in conjunction with writeFormat described above."
                                },
                                "writeCompression": {
                                    "type": "boolean",
                                    "title": "writeCompression",
                                    "description": "Switch to specify whether files are compressed with gzip"
                                },
                                "timeFormat": {
                                    "type": "string",
                                    "enum": [
                                        "fixed",
                                        "scientific",
                                        "general"
                                    ],
                                    "description": "Controls the timing of write output to file."
                                },
                                "timePrecision": {
                                    "title": "timePrecision",
                                    "type": "integer",
                                    "description": "Integer used in conjunction with timeFormat described above"
                                },
                                "runTimeModifiable": {
                                    "type": "boolean",
                                    "title": "runTimeModifiable",
                                    "description": "Switch for whether dictionaries, e.g. controlDict, are re-read during a simulation at the beginning of each time step, allowing the user to modify parameters during a simulation."
                                },
                                "graphFormat": {
                                    "type": "string",
                                    "enum": [
                                        "no graph",
                                        "raw",
                                        "gnuplot",
                                        "xmgr",
                                        "jplot"
                                    ],
                                    "description": "Format for graph data written by an application."
                                },
                                "adjustTimeStep": {
                                    "type": "boolean",
                                    "title": "adjustTimeStep",
                                    "description": "Switch used by some solvers to adjust the time step during the simulation, usually according to maxCo."
                                },
                                "maxCo": {
                                    "title": "maxCo",
                                    "type": "number",
                                    "description": "Maximum Courant number."
                                },
                                "interpolate": {
                                    "type": "boolean",
                                    "title": "interpolate"
                                },
                                "libs": {
                                    "type": "array",
                                    "title": "libs",
                                    "items": {
                                        "type": "string",
                                        "description": "List of additional libraries (on $LD_LIBRARY_PATH) to be loaded at run-time"
                                    }
                                },
                                "functions": {
                                    "type": "array",
                                    "title": "functions",
                                    "items": {
                                        "type": "string",
                                        "description": "Dictionary of functions, e.g.  probes to be loaded at run-time"
                                    }
                                }
                            }
                        },
                        "uiSchema": {
                            "listOfStrings": {
                                "items": {
                                    "ui:emptyValue": ""
                                }
                            },
                            "functions": {
                                "items": {
                                    "ui:emptyValue": ""
                                }
                            }
                        },
                        "formData": {
                            "application": "simpleFoam",
                            "startFrom": "startTime",
                            "startTime": 0,
                            "stopAt": "endTime",
                            "endTime": 1000,
                            "deltaT": 1,
                            "writeControl": "timeStep",
                            "writeInterval": 100,
                            "purgeWrite": 0,
                            "writeFormat": "ascii",
                            "writePrecision": 7,
                            "writeCompression": false,
                            "timeFormat": "general",
                            "timePrecision": 6,
                            "runTimeModifiable": true,
                            "interpolate": true,
                            "functions": [
                                "probes.txt"
                            ]
                        }
                    }
                }
            },
            "FvSchemes": {
                "Execution": {
                    "type": "jinjaExecuters.jinja",
                    "input_parameters": {
                        "values": "{WebGui.formData}",
                        "template": "openFOAM/simpleFOAM/FvSchemes"
                    }
                },
                "GUI": {
                    "Type": "WebGuiNode",
                    "Properties": {},
                    "WebGui": {
                        "Schema": {
                            "type": "object",
                            "properties": {
                                "ddtSchemes": {
                                    "type": "object",
                                    "title": "timeScheme",
                                    "properties": {
                                        "default": {
                                            "type": "string",
                                            "enum": [
                                                "steadyState",
                                                "Euler",
                                                "backward",
                                                "CrankNicolson",
                                                "localEuler"
                                            ],
                                            "description": "The discretisation schemes for each term can be selected from those listed below."
                                        }
                                    }
                                },
                                "gradSchemes": {
                                    "type": "object",
                                    "title": "gradSchemes",
                                    "properties": {
                                        "default": {
                                            "type": "string",
                                            "title": "default",
                                            "enum": [
                                                "Gauss linear",
                                                "leastSquares",
                                                "Gauss"
                                            ],
                                            "description": "The discretisation scheme"
                                        },
                                        "grad(U)": {
                                            "type": "string",
                                            "title": "grad(U)",
                                            "description": "discretisation of velocity gradient terms is overridden to improve boundedness and stability"
                                        },
                                        "grad(k)": {
                                            "type": "string",
                                            "title": "grad(k)",
                                            "description": "discretisation of k gradient terms is overridden to improve boundedness and stability"
                                        },
                                        "grad(epsilon)": {
                                            "type": "string",
                                            "title": "grad(epsilon)",
                                            "description": "discretisation of epsilon gradient terms is overridden to improve boundedness and stability"
                                        }
                                    }
                                },
                                "divSchemes": {
                                    "type": "object",
                                    "title": "divSchemes",
                                    "properties": {
                                        "default": {
                                            "type": "string",
                                            "title": "default",
                                            "description": "contains divergence terms."
                                        },
                                        "div(phi,U)": {
                                            "type": "string",
                                            "title": "div(phi,U)"
                                        },
                                        "div(phi,k)": {
                                            "type": "string",
                                            "title": "div(phi,k)"
                                        },
                                        "div(phi,epsilon)": {
                                            "type": "string",
                                            "title": "div(phi,epsilon)"
                                        },
                                        "div(phi,e)": {
                                            "type": "string",
                                            "title": "div(phi,e)"
                                        },
                                        "div(phi,omega)": {
                                            "type": "string",
                                            "title": "div(phi,omega)"
                                        },
                                        "moreDivSchemesProperties": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "laplacianSchemes": {
                                    "type": "object",
                                    "title": "laplacianSchemes",
                                    "description": "Laplacian terms.",
                                    "properties": {
                                        "default": {
                                            "type": "string",
                                            "title": "default"
                                        }
                                    }
                                },
                                "interpolationSchemes": {
                                    "type": "object",
                                    "title": "interpolationSchemes",
                                    "description": "terms that are interpolations of values typically from cell centres to face centres",
                                    "properties": {
                                        "default": {
                                            "type": "string",
                                            "title": "default"
                                        }
                                    }
                                },
                                "snGradSchemes": {
                                    "type": "object",
                                    "title": "snGradSchemes",
                                    "description": "contains surface normal gradient terms",
                                    "properties": {
                                        "default": {
                                            "type": "string",
                                            "title": "default"
                                        }
                                    }
                                },
                                "wallDist": {
                                    "type": "object",
                                    "title": "wallDist",
                                    "properties": {
                                        "method": {
                                            "type": "string",
                                            "title": "method"
                                        }
                                    }
                                },
                                "fluxRequired": {
                                    "type": "object",
                                    "title": "fluxRequired",
                                    "properties": {
                                        "default": {
                                            "type": "string",
                                            "title": "default"
                                        }
                                    }
                                }
                            }
                        },
                        "uiSchema": {},
                        "formData": {
                            "ddtSchemes": {
                                "default": "steadyState"
                            },
                            "gradSchemes": {
                                "default": "Gauss linear",
                                "grad(U)": "cellLimited Gauss linear 1",
                                "grad(k)": "cellLimited Gauss linear 1",
                                "grad(epsilon)": "cellLimited Gauss linear 1"
                            },
                            "divSchemes": {
                                "moreDivSchemesProperties": {
                                    "div((nuEff*dev2(T(grad(U)))))": "Gauss linear"
                                },
                                "default": "none",
                                "div(phi,U)": "bounded Gauss upwind",
                                "div(phi,k)": "bounded Gauss upwind",
                                "div(phi,epsilon)": "bounded Gauss upwind",
                                "div(phi,omega)": "bounded Gauss upwind"
                            },
                            "laplacianSchemes": {
                                "default": "Gauss linear corrected"
                            },
                            "interpolationSchemes": {
                                "default": "linear"
                            },
                            "snGradSchemes": {
                                "default": "corrected"
                            },
                            "wallDist": {
                                "method": "meshWave"
                            }
                        }
                    }
                }
            }
        }
    }
}