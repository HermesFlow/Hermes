#! /usr/bin/env python
import argparse
from hermes.utils.workflowAssembly import handler_build,handler_buildExecute,handler_expand,handler_execute
from hermes.utils.logging import initialize_logging,with_logger

if __name__ == "__main__":
    initialize_logging(
         with_logger("hermes.bin", handlers=['console'], level='CRITICAL', propagate=False),
         with_logger("hermes.workflow", handlers=['console'], level='CRITICAL', propagate=False),
    )

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='sub-command help',dest="subparser_name")

    parser_expandWorkflow = subparsers.add_parser('expand',
                                                  help='Expands the workflow JSON with the default values of the nodes')
    parser_expandWorkflow.add_argument('workflow', type=str, help="base workflow")
    parser_expandWorkflow.add_argument('caseName', type=str, help="the name of the case to run")

    parser_buildExecuter = subparsers.add_parser('build',
                                                 help='Builds the python execution file for the execution engine ')
    parser_buildExecuter.add_argument('workflow', type=str, help="base workflow")
    parser_buildExecuter.add_argument('caseName', type=str, help="the name of the case to run")
    parser_buildExecuter.add_argument('--parameters', type=str, default=None, required=False,
                                      help="A path to paremeters file (optional)")

    parser_execute = subparsers.add_parser('execute',
                                         help='Runs the python execution file with the appropriate execution engine')
    parser_execute.add_argument('caseName', type=str, help="the name of the case to run")
    parser_execute.add_argument('--force', dest="force", default=False, action="store_true",
                                    help="If exist, delete the execution files first")
    #parser_execute.add_argument('executter', default="luigi", type=str, help="Execution engine: luigi")


    parser_runWorkflow = subparsers.add_parser('buildExecute', help='Expands, builds and executes the workflow JSON')
    parser_runWorkflow.add_argument('workflow', type=str, help="base workflow")
#    parser_runWorkflow.add_argument('caseName', default=None, type=str, help="the name of the case to run. If None, use the workflow base name")
    parser_runWorkflow.add_argument('--force',dest="force", default=False, action="store_true", help="If exist, delete the execution files first")

    args = parser.parse_args()

    if not hasattr(args,"subparser_name"):
        parser.print_help()
    else:
        globals()[f'handler_{args.subparser_name}'](args)


    # if ProjectName:
    #     print('Adding doc to DB')
    #     hera.datalayer.Simulations.addDocument(projectName=ProjectName,
    #                                            resource=newTemplate['CaseDirectory'],
    #                                            dataFormat='string',
    #                                            type='HermesOpenFoam',
    #                                            desc=dict(OF_Workflow=newTemplate)) #desc=dict(OF_Workflow=newTemplate
    # print('done')