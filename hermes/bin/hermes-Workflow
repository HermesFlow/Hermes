#! /usr/bin/env python
import argparse
from hermes import expandWorkflow,hermesWorkflow
import json
import os
import pathlib
import shutil


def handler_expand(arguments):
    exapnder = expandWorkflow()

    templateFileName = f"{arguments.workflow.split('.')[0]}.json"
    expandedWorkflow = f"{arguments.caseName.split('.')[0]}.json"
    newTemplate = exapnder.expand(templateJSON=templateFileName)

    with open(expandedWorkflow, 'w') as fp:
        json.dump(newTemplate, fp,indent=4)

def handler_build(arguments):
    exapnder = expandWorkflow()

    templateFile = f"{arguments.workflow.split('.')[0]}.json"
    newWorkflow = f"{arguments.caseName.split('.')[0]}.py"

    expandedWorkflow = f"{newWorkflow.split('.')[0]}.json"

    parametersPath = dict()
    if arguments.parameters is not None:
        with open(arguments.parameters) as paramfile:
            parametersPath = json.load(paramfile)

    newTemplate = exapnder.expand(templateJSON=templateFile, parameters=parametersPath)
    with open(expandedWorkflow, 'w') as fp:
        json.dump(newTemplate, fp,indent=4)

    WDPath = os.getcwd()

    builder = "luigi"
    flow = hermesWorkflow(newTemplate, WDPath)
    build = flow.build(builder)
    with open(newWorkflow, "w") as file:
        file.write(build)

def handler_execute(arguments):
    """
        Should be updated to select execution engine.
    :param arguments:
    :return:
    """

    pythonPath = arguments.caseName.split(".")[0]


    #cwd = pathlib.Path().absolute()
    #moduleParent = pathlib.Path(pythonPath).parent.absolute()
    #os.chdir(moduleParent)
    executionStr = f"python3 -m luigi --module {os.path.basename(pythonPath)} finalnode_xx_0 --local-scheduler"
    print(executionStr)
    os.system(executionStr)
    #os.chdir(cwd)


def handler_runWorkflow(arguments):

    if not arguments.force:
        # check if there is old expanded json, or python.
        # also if there are old runfiles it will not rerun.

        expnded = f"{arguments.caseName.split('.')[0]}.json"
        newWorkflow = f"{arguments.caseName.split('.')[0]}.py"

        if os.path.exists(expnded):
            print(f"Expended file {expnded} exists. Delete or run with --force flag.")
            exit()
        elif os.path.exists(newWorkflow):
            print(f"Python execution file {newWorkflow} exists. Delete or run with --force flag.")
            exit()


    handler_expand(arguments)
    arguments.workflow = arguments.caseName
    arguments.parameters = None
    handler_build(arguments)

    if arguments.force:
        # delete the run files if exist.
        executionfileDir = f"{arguments.caseName.split('.')[0]}_targetFiles"

        shutil.rmtree(executionfileDir, ignore_errors=True)
    handler_execute(arguments)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='sub-command help',dest="subparser_name")

    parser_expandWorkflow = subparsers.add_parser('expand',
                                                  help='Expands the workflow JSON with the default values of the nodes')
    parser_expandWorkflow.add_argument('workflow', type=str, help="base workflow")
    parser_expandWorkflow.add_argument('caseName', type=str, help="the name of the case to run")

    parser_buildExecuter = subparsers.add_parser('build',
                                                 help='Builds the python execution file for the execution engine ')
    parser_buildExecuter.add_argument('workflow', type=str, help="base workflow")
    parser_buildExecuter.add_argument('caseName', type=str, help="the name of the case to run")
    parser_buildExecuter.add_argument('--parameters', type=str, default=None, required=False,
                                      help="A path to paremeters file (optional)")

    parser_execute = subparsers.add_parser('execute',
                                         help='Runs the python execution file with the appropriate execution engine')
    parser_execute.add_argument('caseName', type=str, help="the name of the case to run")
    #parser_execute.add_argument('executter', default="luigi", type=str, help="Execution engine: luigi")


    parser_runWorkflow = subparsers.add_parser('runWorkflow', help='Expands, builds and executes the workflow JSON')
    parser_runWorkflow.add_argument('workflow', type=str, help="base workflow")
    parser_runWorkflow.add_argument('caseName', type=str, help="the name of the case to run")
    parser_runWorkflow.add_argument('--force',dest="force", default=False, action="store_true", help="If exist, delete the execution files first")


    args = parser.parse_args()

    if not hasattr(args,"subparser_name"):
        parser.print_help()
    else:
        globals()[f'handler_{args.subparser_name}'](args)


    # if ProjectName:
    #     print('Adding doc to DB')
    #     hera.datalayer.Simulations.addDocument(projectName=ProjectName,
    #                                            resource=newTemplate['CaseDirectory'],
    #                                            dataFormat='string',
    #                                            type='HermesOpenFoam',
    #                                            desc=dict(OF_Workflow=newTemplate)) #desc=dict(OF_Workflow=newTemplate
    # print('done')