#! /usr/bin/env python
import argparse
from hermes import expandWorkflow,hermesWorkflow
import json
import os
import pathlib



def handler_expand(arguments):
    exapnder = expandWorkflow()


    templateFileName = arguments.args[0]
    expandedWorkflow = f"{arguments.args[1].split('.')[0]}.json"
    newTemplate = exapnder.expand(templateJSON=templateFileName)

    with open(expandedWorkflow, 'w') as fp:
        json.dump(newTemplate, fp,indent=4)

def handler_build(arguments):
    exapnder = expandWorkflow()

    templateFile = arguments.args[0]
    newWorkflow = f"{arguments.args[1].split('.')[0]}.py"

    expandedWorkflow = f"{newWorkflow.split('.')[0]}.json"

    parametersPath = dict()
    if arguments.parameters is not None:
        with open(arguments.parameters) as paramfile:
            parametersPath = json.load(paramfile)

    newTemplate = exapnder.expand(templateJSON=templateFile, parameters=parametersPath)
    with open(expandedWorkflow, 'w') as fp:
        json.dump(newTemplate, fp,indent=4)

    WDPath = os.getcwd()



    builder = "luigi"
    flow = hermesWorkflow(newTemplate, WDPath,"")
    build = flow.build(builder)
    with open(newWorkflow, "w") as file:
        file.write(build)

def handler_execute(arguments):
    """
        Should be updated to select execution engine.
    :param arguments:
    :return:
    """

    pythonPath = arguments.args[0].split(".")[0]


    #cwd = pathlib.Path().absolute()
    #moduleParent = pathlib.Path(pythonPath).parent.absolute()
    #os.chdir(moduleParent)
    executionStr = f"python3 -m luigi --module {os.path.basename(pythonPath)} finalnode_xx_0 --local-scheduler"
    print(executionStr)
    os.system(executionStr)
    #os.chdir(cwd)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='sub-command help',dest="subparser_name")

    parser_expandWorkflow = subparsers.add_parser('expand',
                                                  help='Expands the workflow JSON with the default values of the nodes')
    parser_buildExecuter = subparsers.add_parser('build',
                                                 help='Builds the python execution file for the execution engine ')
    parser_execute = subparsers.add_parser('execute',
                                       help='Runs the python execution file with the appropriate execution engine')

    parser_expandWorkflow.add_argument('args', nargs=2, type=str, help="[template file] [workflow file]")

    parser_buildExecuter.add_argument('args', nargs=2, type=str, help="[workflow template] [workflow]")
    parser_buildExecuter.add_argument('--parameters', type=str, default=None,required=False, help="A path to paremeters file (optional)")


    parser_execute.add_argument('args', nargs=1, type=str, help="[executer]")

    args = parser.parse_args()

    if not hasattr(args,"subparser_name"):
        parser.print_help()
    else:
        globals()[f'handler_{args.subparser_name}'](args)


    # if ProjectName:
    #     print('Adding doc to DB')
    #     hera.datalayer.Simulations.addDocument(projectName=ProjectName,
    #                                            resource=newTemplate['CaseDirectory'],
    #                                            dataFormat='string',
    #                                            type='HermesOpenFoam',
    #                                            desc=dict(OF_Workflow=newTemplate)) #desc=dict(OF_Workflow=newTemplate
    # print('done')