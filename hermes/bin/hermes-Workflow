#! /usr/bin/env python

import argparse
from hermes import expandPipeline
from hermes import hermesWorkflow
import json
import os
import pathlib
import hera


def handler_expand(arguments):
    exapnder = expandWorkflow()

<<<<<<< HEAD
    templateFileName = arguments.args[0]
    expandedWorkflow = arguments.args[1]
    newTemplate = exapnder.expand(jsonFilePath=templateFileName)
=======
exapnder = expandPipeline()
>>>>>>> e0f09f6255bfc24ea37b48b4e60921a1d9464195

    with open(expandedWorkflow, 'w') as fp:
        json.dump(newTemplate, fp,indent=4)

<<<<<<< HEAD
def handler_build(arguments):
=======
    templatePath = arguments[0]
    newTemplatePath = arguments[1]
    ProjectName = arguments[2] if len(arguments) > 2 else None
    parametersPath = arguments[3] if len(arguments) > 3 else None

    newTemplate = exapnder.expand(pipelinePath=templatePath,parametersPath=parametersPath)
    with open(newTemplatePath, 'w') as fp:
        json.dump(newTemplate, fp)

    if ProjectName:
        print('Adding doc to DB')
        hera.datalayer.Simulations.addDocument(projectName=ProjectName,
                                               resource=newTemplate['CaseDirectory'],
                                               dataFormat='string',
                                               type='HermesOpenFoam',
                                               desc=dict(OF_Workflow=newTemplate)) #desc=dict(OF_Workflow=newTemplate
    print('done')

def buildPython_handler(arguments):
>>>>>>> e0f09f6255bfc24ea37b48b4e60921a1d9464195

    templatePath = arguments[0]
    pythonPath = arguments[1]
    WDPath = arguments[2] if len(arguments) > 2 else str(pathlib.Path(pythonPath).parent.absolute())
    builder = arguments[3] if len(arguments) > 3 else "luigi"
    flow = hermesWorkflow(templatePath, WDPath,"")
    build = flow.build(builder)
    with open(pythonPath, "w") as file:
        file.write(build)

<<<<<<< HEAD
def handler_execute(arguments):
    """
        Should be updated to select execution engine.
    :param arguments:
    :return:
    """

=======
def executeLuigi_handler(arguments):
>>>>>>> e0f09f6255bfc24ea37b48b4e60921a1d9464195
    pythonPath = arguments[0]
    cwd = pathlib.Path().absolute()
    moduleParent = pathlib.Path(pythonPath).parent.absolute()
    os.chdir(moduleParent)
    os.system(f"python3 -m luigi --module {os.path.basename(pythonPath)} finalnode_xx_0 --local-scheduler")
    os.chdir(cwd)

<<<<<<< HEAD

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='sub-command help',dest="subparser_name")

    parser_expandWorkflow = subparsers.add_parser('expand',
                                                  help='Expands the workflow JSON with the default values of the nodes')
    parser_buildExecuter = subparsers.add_parser('build',
                                                 help='Builds the python execution file for the execution engine ')
    parser_execute = subparsers.add_parser('execute',
                                       help='Runs the python execution file with the appropriate execution engine')

    parser_expandWorkflow.add_argument('args', nargs=2, type=str, help="[template file] [workflow file]")

    parser_buildExecuter.add_argument('args', nargs=2, type=str, help="[workflow] [executer name]")
    parser_buildExecuter.add_argument('expand', action='store_true', default=False,
                                      help="If true, also expand the workflow")

    parser_execute.add_argument('args', nargs=1, type=str, help="[executer]")

    args = parser.parse_args()
    print(args)

    if not hasattr(args,"subparser_name"):
        parser.print_help()
    else:
        globals()[f'handler_{args.subparser_name}'](args)

# help = ["\033[1mNAME\033[0m",
#         "\texpand - Expand a workflow\n",
#         "\033[1mSYNOPSYS\033[0m",
#         "\t\033[4mhermes-workflow\033[0m \033[4mexpand\033[0m <template file> <workflow file>\n",
#         "\033[1mDESCRIPTION\033[0m",
#         "\tExpand a workflow by suplementing the templates\n",
#         "\033[1mEXAMPLE\033[0m",
#         '''\t\033[1mhermes-workflow expand test.json final.json\033[0m''',
#         "\t    This example should print all the documents of a project called 'example'"
#         ]
# print('\n'.join(help))
=======
def runAll_handler(arguments):

    expand_handler()
    buildPython_handler()
    executeLuigi_handler()

globals()['%s_handler' % args.command[0]](args.args)
>>>>>>> e0f09f6255bfc24ea37b48b4e60921a1d9464195
