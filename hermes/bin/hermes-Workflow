#! /usr/bin/env python

import argparse
from hermes import expandWorkflow
from hermes import hermesWorkflow
import json
import os
import pathlib
import hera

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(dest="actionName")

parser_expand = subparsers.add_parser('expand', help='Expanding a workflow')
parser_build  = subparsers.add_parser('build', help='Build the python script to execute the workflow')
parser_execute = subparsers.add_parser('run', help='Runs the workflow')


parser_expand.add_argument('-t','-workflow',dest='workflow')
parser_expand.add_argument('-o','-outputPath',dest='outputPath')
parser_expand.add_argument('-p','-projectName',dest='projectName',default=None)
#parser_expand.add_argument('-f','-parameterFile',dest='parameterFile',default=None)

parser_build.add_argument('-t','-workflow',dest='workflow')
parser_build.add_argument('-o','-outputPath',dest='outputPath')
parser_build.add_argument('-w','-workDirectory',dest='workDirectory')
parser_build.add_argument('-e','-executer',dest='executer',choices=['luigi'],default='luigi')

parser_execute.add_argument('-t','-executePath',dest='executePath')




def expand_handler(arguments):

    workflow = arguments.workflow
    newTemplatePath = arguments.outputPath
    ProjectName = arguments.projectName
 #   parametersPath = arguments.parameterFile

    exapnder = expandWorkflow()
    newTemplate = exapnder.expand(workflow) #,parametersPath=parametersPath)
    with open(newTemplatePath, 'w') as fp:
        json.dump(newTemplate, fp)

    if ProjectName:
        print('Adding doc to DB')
        hera.datalayer.Simulations.addDocument(projectName=ProjectName,
                                               resource=newTemplate['CaseDirectory'],
                                               dataFormat='string',
                                               type='HermesOpenFoam',
                                               desc=dict(OF_Workflow=newTemplate)) #desc=dict(OF_Workflow=newTemplate
    print('done')

def buildPython_handler(arguments):

    templatePath = arguments.workflow
    pythonPath   = arguments.outputPath
    WDPath = str(pathlib.Path(pythonPath).parent.absolute()) if arguments.workDirectory is None else arguments.workDirectory
    builder = arguments.executer
    flow = hermesWorkflow(templatePath, WDPath,"")
    build = flow.build(builder)
    with open(pythonPath, "w") as file:
        file.write(build)

def executeLuigi_handler(arguments):
    pythonPath = arguments.executePath
    cwd = pathlib.Path().absolute()
    moduleParent = pathlib.Path(pythonPath).parent.absolute()
    os.chdir(moduleParent)
    os.system(f"python3 -m luigi --module {os.path.basename(pythonPath)} finalnode_xx_0 --local-scheduler")
    os.chdir(cwd)

def runAll_handler(arguments):

    expand_handler()
    buildPython_handler()
    executeLuigi_handler()


if __name__=="__main__":

    args = parser.parse_args()
    print(args)
    globals()['%s_handler' % args.actionName](args)