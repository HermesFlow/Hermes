#! /usr/bin/env python

import argparse
from hermes import expandWorkflow
from hermes import hermesWorkflow
import json
import os
import pathlib

parser = argparse.ArgumentParser()
parser.add_argument('command', nargs=1, type=str)
parser.add_argument('args', nargs='*', type=str)

args = parser.parse_args()

exapnder = expandWorkflow()

def expand_handler(arguments):

    templatePath = arguments[0]
    newTemplatePath = arguments[1]

    newTemplate = exapnder.expand(workflowPath=templatePath)
    with open(newTemplatePath, 'w') as fp:
        json.dump(newTemplate, fp)

def buildPython_handler(arguments):

    templatePath = arguments[0]
    pythonPath = arguments[1]
    WDPath = arguments[2] if len(arguments) > 2 else str(pathlib.Path(pythonPath).parent.absolute())
    builder = arguments[3] if len(arguments) > 3 else "luigi"

    flow = hermesWorkflow(templatePath, WDPath,"")
    build = flow.build(builder)
    with open(pythonPath, "w") as file:
        file.write(build)

def executeLuigi_handler(arguments):

    pythonPath = arguments[0]
    cwd = pathlib.Path().absolute()
    moduleParent = pathlib.Path(pythonPath).parent.absolute()
    os.chdir(moduleParent)
    os.system(f"python3 -m luigi --module {os.path.basename(pythonPath)} finalnode_xx_0 --local-scheduler")
    os.chdir(cwd)

def runAll_handler(arguments):

    expand_handler()
    buildPython_handler()
    executeLuigi_handler()

#######
####    Help
##
#
def help_handler(arguments):
    if not arguments:
        help = ["usage: hermes-Workflow <command> [<args>]\n",
                "These are the available commands:\n",
                "    expand\t Expand a workflow by suplementing the templates",
                "    buildPython\tBuild the Luigi-python code from a workflow",
                "    executeLuigi\tExecute the "
                ]
        print("\n".join(help))
    else:
        try:
            globals()['help_%s_handler' % arguments[0]]()
        except KeyError:
            msg = ["'%s' is not an available command\n" % arguments[0],
                   "These are the available commands:\n",
                   "    expand",
                   "    buildPython",
                   "    executeLuigi"
                   ]
            print("\n".join(msg))



def help_expand_handler():
    #wrapper = textwrap.TextWrapper(width=80)
    help = ["\033[1mNAME\033[0m",
            "\texpand - Expand a workflow\n",
            "\033[1mSYNOPSYS\033[0m",
            "\t\033[4mhermes-workflow\033[0m \033[4mexpand\033[0m <template file> <workflow file>\n",
            "\033[1mDESCRIPTION\033[0m",
            "\tExpand a workflow by suplementing the templates\n",
            "\033[1mEXAMPLE\033[0m",
            '''\t\033[1mhermes-workflow expand test.json final.json\033[0m''',
            "\t    This example should print all the documents of a project called 'example'"
            ]
    print('\n'.join(help))
    # print("list the documents in the project")
    # print("\thera-datalyer list projectName [mongodb query]")



globals()['%s_handler' % args.command[0]](args.args)