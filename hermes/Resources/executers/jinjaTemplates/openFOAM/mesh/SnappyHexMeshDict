/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  3.0.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
{%- import "openFOAM/mesh/utils.jinja" as utils %}

castellatedMesh {{utils.toBool(modules.castellatedMesh)}};
snap            {{utils.toBool(modules.snap)}};
addLayers       {{utils.toBool(modules.layers)}};



geometry
{
    {%- for geometryName,geometryData in geometry.objects.items() %}
    {{geometryData.objectName}}.{{geometryData.objectType}}
    {
        type triSurfaceMesh;
        name {{geometryName}};
        {%- set objRegions=geometryData.regions %}
        regions {
            {%- for regionName,regionData in objRegions.items()  %}
                {{regionName}}
                {
                    name {{regionData.name}};
                    {%- if 'type' in regionData %}
                    type {{regionData.type}};
                    {%- endif %}
                }
            {%- endfor %}
        }

    }
    {%- endfor %}

    {%- for regionName,regionData in geometry.regions.items() %}
        {{regionName}}
        {
            type {{regionData.type}}
            {%- for regionGeometryName,regionGeometryData in regionData.data.items() %}
                {{regionGeometryName}} {{utils.toPoint(regionGeometryData)}}
            {%- endfor %}
        }
    {%- endfor %}
};

castellatedMeshControls
{
    maxGlobalCells      {{castellatedMeshControls.maxGlobalCells}};
    maxLocalCells       {{castellatedMeshControls.maxLocalCells}};
    minRefinementCells  {{castellatedMeshControls.minRefinementCells}};
    maxLoadUnbalance    {{castellatedMeshControls.maxLoadUnbalance}};
    nCellsBetweenLevels {{castellatedMeshControls.nCellsBetweenLevels}};
    resolveFeatureAngle {{castellatedMeshControls.resolveFeatureAngle}};
    allowFreeStandingZoneFaces {{utils.toBool(castellatedMeshControls.allowFreeStandingZoneFaces)}};


    locationInMesh {{utils.toPoint(castellatedMeshControls.locationInMesh)}};

    features
    (
        {%- for geometryName,geometryData in geometry.objects.items() %}
            {
                file "{{geometryData.objectName}}.eMesh";
                level {{geometryData.levels}};
            }
        {%- endfor %}
    );

    refinementSurfaces
    {
    {%- for geometryName,geometryData in geometry.objects.items() %}
        {{geometryName}}
        {
            level {{utils.toPoint(geometryData.refinementSurfaceLevels)}};
            patchInfo { type {{geometryData.patchType}}; }

        }
    {%- endfor %}
    }

    refinementRegions
    {
        {%- for geometryName,geometryData in geometry.objects.items() %}
        {%  set refinementRegions =  geometryData.refinementRegions %}
        {% if 'mode' in geometryData.refinementRegions %}
        {{geometryName}}
        {
            mode {{refinementRegions.mode}};
            levels (
                {% if (refinementRegions.mode == 'inside') or (refinementRegions.mode == 'outside') %}
                {{utils.toPoint(refinementRegions.levels)}}
                {% elif (refinementRegions.mode == 'distance') %}
                    {% for pnt in refinementRegions.levels %} {{utils.toPoint(pnt)}} {% endfor %}
                {% else %}
                    Invalid mode {{refinementRegions.levels}}, must be inside, outside or distance.
                {% endif %});
        }
        {% endif %}

        {% endfor %}
    }
}

snapControls
{
    nSmoothPatch    {{snapControls.nSmoothPatch}};
    tolerance       {{snapControls.tolerance}};
    nSolveIter      {{snapControls.nSolveIter}};
    nRelaxIter      {{snapControls.nRelaxIter}};

    nFeatureSnapIter {{snapControls.nFeatureSnapIter}};

    explicitFeatureSnap    {{utils.toBool(snapControls.explicitFeatureSnap)}};
    multiRegionFeatureSnap {{utils.toBool(snapControls.multiRegionFeatureSnap)}};
    implicitFeatureSnap    {{utils.toBool(snapControls.implicitFeatureSnap)}};

}

addLayersControls
{
    // Per final patch (so not geometry!) the layer information
    layers
    {
        {%- for geometryName,geometryData in geometry.objects.items() %}
        {%- if 'layers' in geometryData %}
            {{geometryData.objectName}}
            {
                nSurfaceLayers {{geometryData.layers.nSurfaceLayers}};
            }
        {%- endif %}
        {%- endfor %}
    }

    // Are the thickness parameters below relative to the undistorted
    // size of the refined cell outside layer (true) or absolute sizes (false).
    relativeSizes {{utils.toBool(addLayersControls.relativeSizes)}};

    // Expansion factor for layer mesh
    expansionRatio {{addLayersControls.expansionRatio}};

    // Wanted thickness of final added cell layer. If multiple layers
    // is the
    // thickness of the layer furthest away from the wall.
    // Relative to undistorted size of cell outside layer.
    // is the thickness of the layer furthest away from the wall.
    // See relativeSizes parameter.
    finalLayerThickness {{addLayersControls.finalLayerThickness}};

    // Minimum thickness of cell layer. If for any reason layer
    // cannot be above minThickness do not add layer.
    // Relative to undistorted size of cell outside layer.
    minThickness {{addLayersControls.minThickness}};

    // If points get not extruded do nGrow layers of connected faces that are
    // also not grown. This helps convergence of the layer addition process
    // close to features.
    // Note: changed(corrected) w.r.t 17x! (didn't do anything in 17x)
    nGrow {{addLayersControls.nGrow}};

    // Advanced settings

    // When not to extrude surface. 0 is flat surface, 90 is when two faces
    // are perpendicular
    featureAngle {{addLayersControls.featureAngle}};

    // At non-patched sides allow mesh to slip if extrusion direction makes
    // angle larger than slipFeatureAngle.
    slipFeatureAngle {{addLayersControls.slipFeatureAngle}};

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter {{addLayersControls.nRelaxIter}};

    // Number of smoothing iterations of surface normals
    nSmoothSurfaceNormals {{addLayersControls.nSmoothSurfaceNormals}};

    // Number of smoothing iterations of interior mesh movement direction
    nSmoothNormals {{addLayersControls.nSmoothNormals}};

    // Smooth layer thickness over surface patches
    nSmoothThickness {{addLayersControls.nSmoothThickness}};

    // Stop layer growth on highly warped cells
    maxFaceThicknessRatio {{addLayersControls.maxFaceThicknessRatio}};

    // Reduce layer growth where ratio thickness to medial
    // distance is large
    maxThicknessToMedialRatio {{addLayersControls.maxThicknessToMedialRatio}};

    // Angle used to pick up medial axis points
    // Note: changed(corrected) w.r.t 17x! 90 degrees corresponds to 130 in 17x.
    minMedianAxisAngle {{addLayersControls.minMedianAxisAngle}};


    // Create buffer region for new layer terminations
    nBufferCellsNoExtrude {{addLayersControls.nBufferCellsNoExtrude}};


    // Overall max number of layer addition iterations. The mesher will exit
    // if it reaches this number of iterations; possibly with an illegal
    // mesh.
    nLayerIter {{addLayersControls.nLayerIter}};

}

meshQualityControls
{


    maxNonOrtho       {{meshQualityControls.maxNonOrtho}};

    maxBoundarySkewness {{meshQualityControls.maxBoundarySkewness}};

    maxInternalSkewness {{meshQualityControls.maxInternalSkewness}};

    maxConcave        {{meshQualityControls.maxConcave}};

    // Minimum cell pyramid volume; case dependent
    minVol            {{meshQualityControls.minVol}};

    minTetQuality    {{meshQualityControls.minTetQuality}};

    // if >0 : preserve single cells with all points on the surface if the
    // resulting volume after snapping (by approximation) is larger than
    // minVolCollapseRatio times old volume (i.e. not collapsed to flat cell).
    //  If <0 : delete always.
    //minVolCollapseRatio 0.5;

    minArea          {{meshQualityControls.minArea}};

    minTwist          {{meshQualityControls.minTwist}};

    minDeterminant    {{meshQualityControls.minDeterminant}};

    minFaceWeight     {{meshQualityControls.minFaceWeight}};

    minVolRatio       {{meshQualityControls.minVolRatio}};

    minTriangleTwist {{meshQualityControls.minTriangleTwist}};

    nSmoothScale      {{meshQualityControls.nSmoothScale}};

    errorReduction    {{meshQualityControls.errorReduction}};

    relaxed
    {
        maxNonOrtho       {{meshQualityControls.relaxed.maxNonOrtho}};
    }


}

writeFlags
(
    {%- for x in range(writeFlags|length) %}
    {{writeFlags[x]}}
    {%- endfor %}
);

mergeTolerance {{modules.mergeTolerance}};

// ************************************************************************* //