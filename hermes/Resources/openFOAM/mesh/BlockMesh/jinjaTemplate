/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  7                                |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

{%- import "openFOAM/utils.jinja"  as utils %}

convertToMeters {{geometry.convertToMeters}};

{% if params %}
{%- for paramName,paramValue in params.items() -%}
{{paramName}} {{paramValue}};
{% endfor -%}
{%- endif %}

vertices
(
    {%- for pnt in vertices %}
        {{utils.toPoint(pnt)}}
    {%- endfor %}
);

blocks
(
    {%- for blck in blocks %}
    hex {{utils.toPoint(blck.hex)}}
    {{utils.toPoint(blck.cellCount)}}
    simpleGrading
    (

        {% for grd in blck.grading -%}
            {%- if grd is sequence -%}
            (
            {% for dtl in grd -%}
                ( {{dtl.fracDir}} {{dtl.fracCells}} {{dtl.expansion}} )
            {% endfor -%}
            )
            {%- else -%}
                {{grd}}
            {%- endif %}
          {% endfor %}
    )
    {% endfor %}
);

defaultPatch
{
    type {{defaultPatch}};
}

edges
(
    {%- for edge in edges %}
        {%- if edge['type'] =='arc' %}
            arc {{edge.point1}} {{edge.point2}} {{utils.toPoint(edge.pointM)}}
        {%- endif %}
    {%- endfor %}
);

boundary
(
    {%- for bndry in boundary %}
        {{bndry.name}}
        {
            type {{bndry.type}};
            faces
            (
                {%if bndry.faces|length>0 %}
                {%- for indx in range(bndry.faces|length)%}
                       {{utils.toPoint(bndry.faces[indx])}}
                {%- endfor %}
                {% endif %}

            );
            {%- if bndry['type'] =='cyclic' %}
                neighbourPatch {{bndry.neighbourPatch}};
            {%- endif %}
        }
    {%- endfor %}
);

mergePatchPairs
(
);

// ************************************************************************* //